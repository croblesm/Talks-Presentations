# K8's deployment for SQL Server
# --------------------------------------

# Start minikube
[dba mastery] ~ $  minikube start
😄  minikube v1.0.0 on darwin (amd64)
🤹  Downloading Kubernetes v1.14.0 images in the background ...
💡  Tip: Use 'minikube start -p <name>' to create a new cluster, or 'minikube delete' to delete this one.
🔄  Restarting existing virtualbox VM for "minikube" ...
⌛  Waiting for SSH access ...
📶  "minikube" IP address is 192.168.99.100
🐳  Configuring Docker as the container runtime ...
🐳  Version of container runtime is 17.12.1-ce
⌛  Waiting for image downloads to complete ...
✨  Preparing Kubernetes environment ...
🚜  Pulling images required by Kubernetes v1.14.0 ...
🔄  Relaunching Kubernetes v1.14.0 using kubeadm ... 
⌛  Waiting for pods: apiserver proxy etcd scheduler controller dns
📯  Updating kube-proxy configuration ...
🤔  Verifying component health ......
💗  kubectl is now configured to use "minikube"
🏄  Done! Thank you for using minikube!

# Create SQL Server namespace
[dba mastery] ~ $  kubectl create namespace sql-kubernetes
namespace/sql-kubernetes created

# Create secret
kubectl create secret generic mssql --from-literal=SA_PASSWORD="20Ye4rsOfP@ss#"
secret/mssql created

# Create PersistentVolumeClaim yaml file for SQL Server deployment
vi pvc_sql-kubernetes.yaml
    kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
    name: mssql-data-claim
    spec:
    accessModes:
    - ReadWriteOnce
    resources:
    requests:
        storage: 10Gi

# Apply PersistentVolumeClaim yaml file for SQL Server deployment
[dba mastery] ~ $  kubectl apply -f pvc_sql-kubernetes.yaml
persistentvolumeclaim/mssql-data-claim created

# Deploy service 
vi sql-kubernetes.yaml
[dba mastery] ~ $  kubectl apply -f sql-kubernetes.yaml
service/mssql-deployment created

# Get K8s information
kubectl get pods
kubectl get services
minikube service mssql-deployment --url

# Open ADS and connect
sqlcmd -S 192.168.99.100,32673 -U SA -P "20Ye4rsOfP@ss#"